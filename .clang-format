BasedOnStyle: LLVM
Language: C
Standard: Latest

UseTab: Never
IndentWidth: 2
TabWidth: 2
ColumnLimit: 80

AttributeMacros: []
ForEachMacros: []
IfMacros: []
NamespaceMacros: []
StatementAttributeLikeMacros: []
StatementMacros: []
TypenameMacros: []
WhitespaceSensitiveMacros: []

TemplateNames: []
TypeNames: []

AccessModifierOffset: 2

AlignAfterOpenBracket: BlockIndent
AlignArrayOfStructures: Left

AlignConsecutiveAssignments: 
  Enabled: true
  AcrossEmptyLines: true
  AcrossComments: true
  AlignCompound: true
  AlignFunctionDeclarations: true
  AlignFunctionPointers: true
  PadOperators: true

AlignConsecutiveDeclarations:
  Enabled: true
  AcrossEmptyLines: true
  AcrossComments: true
  AlignCompound: true
  AlignFunctionDeclarations: true
  AlignFunctionPointers: true
  PadOperators: true

AlignConsecutiveMacros:
  Enabled: true
  AcrossEmptyLines: true
  AcrossComments: true
  AlignCompound: true
  AlignFunctionDeclarations: true
  AlignFunctionPointers: true
  PadOperators: true

AlignConsecutiveShortCaseStatements:
  Enabled: true
  AcrossEmptyLines: true
  AcrossComments: true
  AlignCaseColons: true

AlignEscapedNewlines: Right

AlignOperands: AlignAfterOperator

AlignTrailingComments:
  Kind: Always
  OverEmptyLines: 1

AllowAllArgumentsOnNextLine: true

AllowAllParametersOfDeclarationOnNextLine: true

AllowBreakBeforeNoexceptSpecifier: Always

AllowShortBlocksOnASingleLine: Empty

AllowShortCaseExpressionOnASingleLine: true
AllowShortCaseLabelsOnASingleLine: true

AllowShortCompoundRequirementOnASingleLine: true

AllowShortEnumsOnASingleLine: false

AllowShortFunctionsOnASingleLine: false

AllowShortIfStatementsOnASingleLine: Never

AllowShortLambdasOnASingleLine: None

AllowShortLoopsOnASingleLine: false

AllowShortNamespacesOnASingleLine: false

AlwaysBreakAfterDefinitionReturnType: All
AlwaysBreakAfterReturnType: All

AlwaysBreakBeforeMultilineStrings: true

AlwaysBreakTemplateDeclarations: true

BinPackArguments: false

BinPackParameters: AlwaysOnePerLine

BitFieldColonSpacing: Both

BreakBeforeBinaryOperators: All
PenaltyBreakAssignment: 0
PenaltyBreakBeforeFirstCallParameter: 0

BreakBeforeBraces: Custom
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
  AfterControlStatement: Always
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: true
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: true
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: true
  BeforeWhile: true
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false

BreakAdjacentStringLiterals: true

BreakAfterReturnType: All

BreakBeforeConceptDeclarations: true

BreakBeforeInlineASMColon: Always

BreakBeforeTernaryOperators: true

BreakBinaryOperations: RespectPrecedence

BreakConstructorInitializers: AfterColon

BreakFunctionDefinitionParameters: true

BreakInheritanceList: AfterColon

BreakStringLiterals: true

BreakTemplateDeclarations: Yes

CommentPragmas: "@pragma:"

CompactNamespaces: false

ConstructorInitializerIndentWidth: 2

ContinuationIndentWidth: 2

Cpp11BracedListStyle: true

EmptyLineAfterAccessModifier: Never

EmptyLineBeforeAccessModifier: Always

FixNamespaceComments: true

IncludeBlocks: Regroup
IncludeCategories:
   - Regex:           '^".*"'
     Priority:        0
     SortPriority:    0
     CaseSensitive:   true
   - Regex:           '^<(assert|complex|w?ctype|(stdm|w|u)char|(tg)?math|errno|fenv|float|inttypes|iso646|limits|locale|setjmp|signal|std.*|string|threads|time|vadefs).h>'
     Priority:        1
     SortPriority:    1
     CaseSensitive:   true
   - Regex:           '.*'
     Priority:        2
     SortPriority:    2
     CaseSensitive:   true

#  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
#    Priority:        2
#    SortPriority:    2
#    CaseSensitive:   true
#  - Regex:           '^((<|")(gtest|gmock|isl|json)/)'
#    Priority:        3
#  - Regex:           '<[[:alnum:].]+>'
#    Priority:        4
#  - Regex:           '.*'
#    Priority:        1
#    SortPriority:    0

IndentAccessModifiers: false

IndentCaseBlocks: false

IndentCaseLabels: true

IndentExportBlock: true

IndentExternBlock: true

IndentGotoLabels: false

IndentPPDirectives: AfterHash

IndentRequiresClause: true

IndentWrappedFunctionNames: false

InsertBraces: true

InsertNewlineAtEOF: true

InsertTrailingCommas: None

IntegerLiteralSeparator:
  Binary: 2
  BinaryMinDigits: 8
  Decimal: 3
  DecimalMinDigits: 10
  Hex: 8
  HexMinDigits: 16

KeepEmptyLines:
  AtEndOfFile: true
  AtStartOfBlock: false
  AtStartOfFile: false

KeepFormFeed: true

LambdaBodyIndentation: Signature

LineEnding: CRLF

MainIncludeChar: Quote

MaxEmptyLinesToKeep: 1

NamespaceIndentation: All

PPIndentWidth: 2

PackConstructorInitializers: Never

PointerAlignment: Right

QualifierAlignment: Custom
QualifierOrder:
  - friend
  - static
  - inline
  - volatile
  - const
  - constexpr
  - type
  - restrict

ReferenceAlignment: Right

ReflowComments: Always

RemoveEmptyLinesInUnwrappedLines: true

RemoveParentheses: MultipleParentheses

RemoveSemicolon: true

RequiresClausePosition: OwnLine

RequiresExpressionIndentation: OuterScope

SeparateDefinitionBlocks: Always

ShortNamespaceLines: 0

SortIncludes: CaseSensitive

SortUsingDeclarations: Lexicographic

SpaceAfterCStyleCast: true

SpaceAfterLogicalNot: false

SpaceAfterTemplateKeyword: true

SpaceAroundPointerQualifiers: Both

SpaceBeforeAssignmentOperators: true

SpaceBeforeCaseColon: true

SpaceBeforeCpp11BracedList: true

SpaceBeforeCtorInitializerColon: true

SpaceBeforeInheritanceColon: true

SpaceBeforeParens: Never

SpaceBeforeRangeBasedForLoopColon: true

SpaceBeforeSquareBrackets: false

SpaceInEmptyBlock: true

SpacesBeforeTrailingComments: 3

SpacesInAngles: Never

SpacesInLineCommentPrefix:
  Minimum: 1

WrapNamespaceBodyWithEmptyLines: Always